---
import type { GetStaticPaths } from "astro";
import Layout from "@layouts/Layout.astro";

import { API_URL } from "../../../consts";
import PokemonCard from "@components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list-response";
import { getPokemonAudio, getPokemonId } from "@utils/pokemon-resources";
import { getPokemonImage } from "@utils/pokemon-resources";
import Title from "@components/pokemons/shared/Title.astro";

import {Icon} from "astro-icon/components";

interface Props {
  url: string;
}

export const getStaticPaths: GetStaticPaths = async () => {

  const response = await fetch(API_URL);
  const { results } = await response.json() as PokemonListResponse;
 
  if (results.length) {
    return results.map((pokemon) => ({
      params: { name: pokemon.name },
      props: { name: pokemon.name, url: pokemon.url }
    }));
  }
  return [];
}

const { name } = Astro.params;
const { url } = Astro.props;

const id = getPokemonId(url);

const audioSource = getPokemonAudio(id as string);
const imageSource = getPokemonImage(id as string);
---
<Layout 
  title={`Pokemon # ${id} - ${name}`}
  description={`Informacion sobre el pokemon ${name}`}
  image={imageSource}
/>

  <section
    class="mt-10 mx-10 flex flex-col justify-center items-center"
  >
   <div class="flex flex-row">
    <div>
     <button 
      onclick="history.back()"  
      class="hover:underline text-blue-500">
      Regresar
    </button>
    <Title>{name}</Title>
   </div>
   <button 
    id="favorite-button" 
    class="ml-4"
    data-name={name}
    data-id={id}
    >
    <Icon name="heart-outline" size={50}/>
    <Icon name="heart-full" size={50} class="hidden"/>
   </button>
   </div>

    <PokemonCard name={name as string} url={url} isBig />
    
    <audio controls class="mt-5">
      <source src={audioSource} type="audio/ogg" />
      Your browser does not support the audio element.
    </audio>

  </section>

</Layout>  

<script>
  interface FavoritePokemons {
    name: string;
    id: string;
  };


  document.addEventListener('astro:page-load',()=>{ //  sino solo se carga una vez por el ClientRouter

    const favoriteButton = document.getElementById('favorite-button') as HTMLButtonElement;
  
    if (!favoriteButton) return;

    const name = favoriteButton.dataset.name;
    const id = favoriteButton.dataset.id;
    
    favoriteButton.addEventListener('click', ()=>{
      console.log({ name, id });
    });

  });


</script>

<style>
  @reference "../../styles/global.css";
  #favorite-button {
    @apply hover:animate-pulse;
  }
</style>